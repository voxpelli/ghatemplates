name: Linting

on:
  workflow_call:
    inputs:
      os:
        description: 'A comma separated list of operating systems to test on.'
        required: false
        default: 'ubuntu-latest'
        type: string
      node-versions:
        description: 'A comma separated list of Node versions to test with.'
        required: false
        default: 'lts/*'
        type: string
      lockfile:
        description: 'Whether to expect a lockfile or not'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  resolve_inputs:
    name: Resolving inputs
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.split-os.outputs.splitted }}
      nodeVersions: ${{ steps.split-node-versions.outputs.splitted }}
    steps:
      - id: split-os
        run: echo "splitted=$(echo '${{ inputs.os }}' | jq -R -c 'split(",")')" >> $GITHUB_OUTPUT
      - id: split-node-versions
        run: echo "splitted=$(echo '${{ inputs.node-versions }}' | jq -R -c 'split(",")')" >> $GITHUB_OUTPUT

  lint:
    name: Node ${{ matrix.node_version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs:
      - resolve_inputs
    strategy:
      fail-fast: false
      matrix:
        node_version: ${{ fromJson(needs.resolve_inputs.outputs.nodeVersions) }}
        os: ${{ fromJson(needs.resolve_inputs.outputs.os) }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Determine npm cache directory windows
        id: npm-cache-dir-windows
        if: runner.os == 'Windows'
        run: echo "dir=$(npm config get cache)" >> $env:GITHUB_OUTPUT
      - name: Determine npm cache directory non-windows
        id: npm-cache-dir
        if: runner.os != 'Windows'
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache-dir-windows.outputs.dir || steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - if: inputs.lockfile == false
        run: npm install --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - if: inputs.lockfile == true
        run: npm ci --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: npm rebuild && npm run prepare --if-present
      - run: npm run check
